{"message":"unused imports: `Assigned`, `Fixed`, `TableColumn`, `VerificationStrategy`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/test.rs","byte_start":379,"byte_end":387,"line_start":9,"line_end":9,"column_start":63,"column_end":71,"is_primary":true,"text":[{"text":"    create_proof, keygen_pk, keygen_vk, verify_proof, Advice, Assigned, BatchVerifier, Circuit,","highlight_start":63,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/test.rs","byte_start":450,"byte_end":455,"line_start":10,"line_end":10,"column_start":38,"column_end":43,"is_primary":true,"text":[{"text":"    Column, ConstraintSystem, Error, Fixed, SingleVerifier, TableColumn, VerificationStrategy,","highlight_start":38,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/test.rs","byte_start":473,"byte_end":484,"line_start":10,"line_end":10,"column_start":61,"column_end":72,"is_primary":true,"text":[{"text":"    Column, ConstraintSystem, Error, Fixed, SingleVerifier, TableColumn, VerificationStrategy,","highlight_start":61,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/test.rs","byte_start":486,"byte_end":506,"line_start":10,"line_end":10,"column_start":74,"column_end":94,"is_primary":true,"text":[{"text":"    Column, ConstraintSystem, Error, Fixed, SingleVerifier, TableColumn, VerificationStrategy,","highlight_start":74,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/test.rs","byte_start":377,"byte_end":387,"line_start":9,"line_end":9,"column_start":61,"column_end":71,"is_primary":true,"text":[{"text":"    create_proof, keygen_pk, keygen_vk, verify_proof, Advice, Assigned, BatchVerifier, Circuit,","highlight_start":61,"highlight_end":71}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/test.rs","byte_start":448,"byte_end":455,"line_start":10,"line_end":10,"column_start":36,"column_end":43,"is_primary":true,"text":[{"text":"    Column, ConstraintSystem, Error, Fixed, SingleVerifier, TableColumn, VerificationStrategy,","highlight_start":36,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/test.rs","byte_start":471,"byte_end":506,"line_start":10,"line_end":10,"column_start":59,"column_end":94,"is_primary":true,"text":[{"text":"    Column, ConstraintSystem, Error, Fixed, SingleVerifier, TableColumn, VerificationStrategy,","highlight_start":59,"highlight_end":94}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Assigned`, `Fixed`, `TableColumn`, `VerificationStrategy`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/test.rs:9:63\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    create_proof, keygen_pk, keygen_vk, verify_proof, Advice, Assigned, BatchVerifier, Circuit,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Column, ConstraintSystem, Error, Fixed, SingleVerifier, TableColumn, VerificationStrategy,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `k`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/test.rs","byte_start":5903,"byte_end":5904,"line_start":177,"line_end":177,"column_start":11,"column_end":12,"is_primary":true,"text":[{"text":"fn prover(k: u32, params: &Params<EqAffine>, pk: &ProvingKey<EqAffine>, circuit: MyCircuit<Fp>) -> Vec<u8> {","highlight_start":11,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/test.rs","byte_start":5903,"byte_end":5904,"line_start":177,"line_end":177,"column_start":11,"column_end":12,"is_primary":true,"text":[{"text":"fn prover(k: u32, params: &Params<EqAffine>, pk: &ProvingKey<EqAffine>, circuit: MyCircuit<Fp>) -> Vec<u8> {","highlight_start":11,"highlight_end":12}],"label":null,"suggested_replacement":"_k","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `k`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/test.rs:177:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn prover(k: u32, params: &Params<EqAffine>, pk: &ProvingKey<EqAffine>, circuit: MyCircuit<Fp>) -> Vec<u8> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_k`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}
